#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ÏôÑÎ≤ΩÌïú Ìï≠ÏÉùÏ†ú ÎÇ¥ÏÑ± ÏßÑÌôî AI ÏãúÎÆ¨Î†àÏù¥ÌÑ∞ - ÏàòÏ†ïÎêú Î≤ÑÏ†Ñ
Samsung Innovation Challenge 2025

ÌïúÍ∏Ä Ìè∞Ìä∏ Î∞è Í∑∏ÎûòÌîÑ ÌëúÏãú Î¨∏Ï†ú Ìï¥Í≤∞
"""

import os
import sys
import platform
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from matplotlib.widgets import Slider, Button
import seaborn as sns
import pandas as pd
import json
from datetime import datetime
import warnings

# Î∞±ÏóîÎìú ÏÑ§Ï†ï (Ïö¥ÏòÅÏ≤¥Ï†úÎ≥Ñ)
if platform.system() == 'Darwin':  # macOS
    matplotlib.use('TkAgg')
elif platform.system() == 'Windows':
    matplotlib.use('Qt5Agg')
else:  # Linux
    matplotlib.use('TkAgg')

warnings.filterwarnings('ignore')

# ÌïúÍ∏Ä Ìè∞Ìä∏ ÏÑ§Ï†ï Ìï®Ïàò
def setup_korean_font():
    """ÌïúÍ∏Ä Ìè∞Ìä∏ ÏÑ§Ï†ï"""
    try:
        # macOSÏö© ÌïúÍ∏Ä Ìè∞Ìä∏ ÏãúÎèÑ
        fonts = [
            'AppleGothic',
            'Noto Sans CJK KR',
            'Apple SD Gothic Neo',
            'NanumGothic',
            'Malgun Gothic',
            'DejaVu Sans'
        ]
        
        for font in fonts:
            try:
                plt.rcParams['font.family'] = font
                # ÌÖåÏä§Ìä∏
                fig, ax = plt.subplots(figsize=(1, 1))
                ax.text(0.5, 0.5, 'ÌïúÍ∏ÄÌÖåÏä§Ìä∏', fontsize=12)
                plt.close(fig)
                print(f"‚úÖ ÌïúÍ∏Ä Ìè∞Ìä∏ ÏÑ§Ï†ï ÏÑ±Í≥µ: {font}")
                break
            except:
                continue
        
        # Í∏∞Î≥∏ ÏÑ§Ï†ï
        plt.rcParams['axes.unicode_minus'] = False
        plt.rcParams['figure.figsize'] = (12, 8)
        plt.rcParams['font.size'] = 10
        
    except Exception as e:
        print(f"‚ö†Ô∏è Ìè∞Ìä∏ ÏÑ§Ï†ï Í≤ΩÍ≥†: {e}")
        print("Í∏∞Î≥∏ Ìè∞Ìä∏Î•º ÏÇ¨Ïö©Ìï©ÎãàÎã§.")

class FixedAntibioticSimulator:
    def __init__(self):
        """ÏãúÎÆ¨Î†àÏù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî"""
        # ÌïúÍ∏Ä Ìè∞Ìä∏ ÏÑ§Ï†ï
        setup_korean_font()
        
        # Í∏∞Î≥∏ Ïä§ÌÉÄÏùº
        plt.style.use('default')  # dark_background ÎåÄÏã† Í∏∞Î≥∏ Ïä§ÌÉÄÏùº
        
        print("üß¨ ÏôÑÎ≤ΩÌïú Ìï≠ÏÉùÏ†ú ÎÇ¥ÏÑ± ÏßÑÌôî AI ÏãúÎÆ¨Î†àÏù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî Ï§ë...")
        
        # ÏãúÎÆ¨Î†àÏù¥ÏÖò ÏÉÅÌÉú
        self.running = False
        self.current_time = 0
        self.max_time = 168  # 7Ïùº
        self.dt = 0.5
        
        # ÌååÎùºÎØ∏ÌÑ∞
        self.dose = 500
        self.interval = 12
        self.patient_weight = 70
        
        # ÏïΩÎèôÌïô ÌååÎùºÎØ∏ÌÑ∞
        self.ke = 0.173  # Ï†úÍ±∞Ïú®
        self.vd = 175    # Î∂ÑÌè¨Ïö©Ï†Å
        
        # ÏÑ∏Í∑† ÌååÎùºÎØ∏ÌÑ∞
        self.S = 1e8  # Í∞êÏàòÏÑ±Í∑†
        self.R = 1e4  # ÎÇ¥ÏÑ±Í∑†
        self.mic_s = 0.5
        self.mic_r = 8.0
        self.emax = 4.0
        self.hill = 2.0
        
        # Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
        self.reset_data()
        
        print("‚úÖ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å!")
        
    def reset_data(self):
        """Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî"""
        self.data = {
            'times': [],
            'concentrations': [],
            's_populations': [],
            'r_populations': [],
            'resistance_fractions': [],
            'dose_events': []
        }
        
    def calculate_concentration(self, t):
        """ÏïΩÎ¨º ÎÜçÎèÑ Í≥ÑÏÇ∞"""
        conc = 0
        dose_times = np.arange(0, self.max_time, self.interval)
        
        for dose_time in dose_times:
            if t >= dose_time:
                time_since_dose = t - dose_time
                dose_conc = (self.dose / self.vd) * np.exp(-self.ke * time_since_dose)
                conc += dose_conc
        return conc
        
    def pharmacodynamic_effect(self, conc, mic):
        """ÏïΩÎ†•ÌïôÏ†Å Ìö®Í≥º Í≥ÑÏÇ∞"""
        if conc <= 0:
            return 0
        return self.emax * (conc ** self.hill) / (mic ** self.hill + conc ** self.hill)
        
    def update_simulation_step(self):
        """ÏãúÎÆ¨Î†àÏù¥ÏÖò Ìïú Ïä§ÌÖù ÏóÖÎç∞Ïù¥Ìä∏"""
        t = self.current_time
        
        # ÎÜçÎèÑ Í≥ÑÏÇ∞
        conc = self.calculate_concentration(t)
        
        # ÏïΩÎ†•Ìïô Ìö®Í≥º
        kill_rate_s = self.pharmacodynamic_effect(conc, self.mic_s)
        kill_rate_r = self.pharmacodynamic_effect(conc, self.mic_r)
        
        # ÏÑ±Ïû•Î•†
        growth_rate_s = 0.693
        growth_rate_r = 0.623
        mutation_rate = 1e-8
        carrying_capacity = 1e12
        
        # ÏÑ±Ïû• Ï†úÌïú
        total_pop = self.S + self.R
        growth_factor = max(0, 1 - total_pop / carrying_capacity)
        
        # Î≥ÄÌôîÏú®
        dS_dt = (growth_rate_s * growth_factor - kill_rate_s) * self.S - mutation_rate * self.S
        dR_dt = (growth_rate_r * growth_factor - kill_rate_r) * self.R + mutation_rate * self.S
        
        # ÏóÖÎç∞Ïù¥Ìä∏
        self.S = max(0, self.S + dS_dt * self.dt)
        self.R = max(0, self.R + dR_dt * self.dt)
        
        # Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
        total = self.S + self.R
        resistance_frac = (self.R / total * 100) if total > 0 else 0
        
        self.data['times'].append(t)
        self.data['concentrations'].append(conc)
        self.data['s_populations'].append(self.S)
        self.data['r_populations'].append(self.R)
        self.data['resistance_fractions'].append(resistance_frac)
        
        # Ìà¨ÏïΩ Ïù¥Î≤§Ìä∏ Í∏∞Î°ù
        dose_times = np.arange(0, self.max_time, self.interval)
        if any(abs(t - dt) < self.dt for dt in dose_times):
            self.data['dose_events'].append(t)
        
        self.current_time += self.dt
        
    def setup_gui(self):
        """GUI ÏÑ§Ï†ï"""
        print("üìä Í∑∏ÎûòÌîÑ Ï∞Ω ÏÑ§Ï†ï Ï§ë...")
        
        # Figure ÏÉùÏÑ± (Î™ÖÏãúÏ†Å Î∞±ÏóîÎìú ÏÇ¨Ïö©)
        self.fig = plt.figure(figsize=(16, 10))
        self.fig.suptitle('üß¨ ÏôÑÎ≤ΩÌïú Ìï≠ÏÉùÏ†ú ÎÇ¥ÏÑ± ÏßÑÌôî AI ÏãúÎÆ¨Î†àÏù¥ÌÑ∞', fontsize=16, fontweight='bold')
        
        # ÏÑúÎ∏åÌîåÎ°Ø ÏÑ§Ï†ï
        gs = self.fig.add_gridspec(3, 3, hspace=0.4, wspace=0.3)
        
        # 1. ÏïΩÎ¨º ÎÜçÎèÑ Í∑∏ÎûòÌîÑ (ÏÉÅÎã® Ï¢åÏ∏°)
        self.ax1 = self.fig.add_subplot(gs[0, :2])
        self.ax1.set_title('üíä Ïã§ÏãúÍ∞Ñ ÏïΩÎ¨º ÎÜçÎèÑ', fontsize=14, fontweight='bold')
        self.ax1.set_xlabel('ÏãúÍ∞Ñ (ÏãúÍ∞Ñ)')
        self.ax1.set_ylabel('ÎÜçÎèÑ (mg/L)')
        self.ax1.set_yscale('log')
        self.ax1.grid(True, alpha=0.3)
        
        # 2. ÏÑ∏Í∑† ÏßëÎã® (ÏÉÅÎã® Ïö∞Ï∏°)
        self.ax2 = self.fig.add_subplot(gs[0, 2])
        self.ax2.set_title('ü¶† ÏÑ∏Í∑† ÏßëÎã®', fontsize=14, fontweight='bold')
        self.ax2.set_xlabel('ÏãúÍ∞Ñ (ÏãúÍ∞Ñ)')
        self.ax2.set_ylabel('ÏÑ∏Í∑† Ïàò (CFU/mL)')
        self.ax2.set_yscale('log')
        self.ax2.grid(True, alpha=0.3)
        
        # 3. ÎÇ¥ÏÑ± ÎπÑÏú® (Ï§ëÍ∞Ñ Ï¢åÏ∏°)
        self.ax3 = self.fig.add_subplot(gs[1, :2])
        self.ax3.set_title('üìä ÎÇ¥ÏÑ± ÎπÑÏú® Î≥ÄÌôî', fontsize=14, fontweight='bold')
        self.ax3.set_xlabel('ÏãúÍ∞Ñ (ÏãúÍ∞Ñ)')
        self.ax3.set_ylabel('ÎÇ¥ÏÑ± ÎπÑÏú® (%)')
        self.ax3.grid(True, alpha=0.3)
        
        # 4. Ïã§ÏãúÍ∞Ñ ÌÜµÍ≥Ñ (Ï§ëÍ∞Ñ Ïö∞Ï∏°)
        self.ax4 = self.fig.add_subplot(gs[1, 2])
        self.ax4.set_title('üìà Ïã§ÏãúÍ∞Ñ ÌÜµÍ≥Ñ', fontsize=14, fontweight='bold')
        self.ax4.axis('off')
        
        # ÏÑ† Í∞ùÏ≤¥ Ï¥àÍ∏∞Ìôî
        self.line_conc, = self.ax1.plot([], [], 'b-', linewidth=2, label='ÎÜçÎèÑ')
        self.line_s, = self.ax2.plot([], [], 'g-', linewidth=2, label='Í∞êÏàòÏÑ±Í∑†')
        self.line_r, = self.ax2.plot([], [], 'r-', linewidth=2, label='ÎÇ¥ÏÑ±Í∑†')
        self.line_total, = self.ax2.plot([], [], 'k--', linewidth=1, label='Ï¥ùÌï©')
        self.line_resistance, = self.ax3.plot([], [], 'orange', linewidth=2, label='ÎÇ¥ÏÑ± ÎπÑÏú®')
        
        # MIC ÏÑ†Îì§
        self.ax1.axhline(y=self.mic_s, color='green', linestyle='--', alpha=0.7, label='MIC (Í∞êÏàòÏÑ±)')
        self.ax1.axhline(y=self.mic_r, color='red', linestyle='--', alpha=0.7, label='MIC (ÎÇ¥ÏÑ±)')
        
        # Î≤îÎ°Ä
        self.ax1.legend()
        self.ax2.legend()
        self.ax3.legend()
        
        # Ïª®Ìä∏Î°§ Ìå®ÎÑê
        self.setup_controls()
        
        print("‚úÖ Í∑∏ÎûòÌîÑ Ï∞Ω ÏÑ§Ï†ï ÏôÑÎ£å!")
        
    def setup_controls(self):
        """Ïª®Ìä∏Î°§ Ìå®ÎÑê ÏÑ§Ï†ï"""
        # Ïä¨ÎùºÏù¥Îçî ÏúÑÏπò
        ax_dose = plt.axes([0.1, 0.02, 0.3, 0.03])
        self.slider_dose = Slider(ax_dose, 'Ïö©Îüâ (mg)', 100, 2000, valinit=self.dose, valfmt='%.0f')
        self.slider_dose.on_changed(self.update_dose)
        
        ax_interval = plt.axes([0.5, 0.02, 0.2, 0.03])
        self.slider_interval = Slider(ax_interval, 'Í∞ÑÍ≤© (h)', 6, 24, valinit=self.interval, valfmt='%.0f')
        self.slider_interval.on_changed(self.update_interval)
        
        # Î≤ÑÌäºÎì§
        ax_start = plt.axes([0.75, 0.02, 0.1, 0.03])
        self.btn_start = Button(ax_start, 'ÏãúÏûë')
        self.btn_start.on_clicked(self.toggle_simulation)
        
        ax_reset = plt.axes([0.87, 0.02, 0.1, 0.03])
        self.btn_reset = Button(ax_reset, 'Î¶¨ÏÖã')
        self.btn_reset.on_clicked(self.reset_simulation)
        
    def update_dose(self, val):
        self.dose = self.slider_dose.val
        
    def update_interval(self, val):
        self.interval = self.slider_interval.val
        
    def toggle_simulation(self, event):
        if self.running:
            self.running = False
            self.btn_start.label.set_text('ÏãúÏûë')
            print("‚è∏Ô∏è ÏãúÎÆ¨Î†àÏù¥ÏÖò Ï†ïÏßÄ")
        else:
            self.running = True
            self.btn_start.label.set_text('Ï†ïÏßÄ')
            print("‚ñ∂Ô∏è ÏãúÎÆ¨Î†àÏù¥ÏÖò ÏãúÏûë")
            
    def reset_simulation(self, event):
        print("üîÑ ÏãúÎÆ¨Î†àÏù¥ÏÖò Î¶¨ÏÖã")
        self.running = False
        self.current_time = 0
        self.S = 1e8
        self.R = 1e4
        self.reset_data()
        self.btn_start.label.set_text('ÏãúÏûë')
        self.clear_plots()
        
    def clear_plots(self):
        """Í∑∏ÎûòÌîÑ Ï¥àÍ∏∞Ìôî"""
        self.line_conc.set_data([], [])
        self.line_s.set_data([], [])
        self.line_r.set_data([], [])
        self.line_total.set_data([], [])
        self.line_resistance.set_data([], [])
        plt.draw()
        
    def update_plots(self):
        """Í∑∏ÎûòÌîÑ ÏóÖÎç∞Ïù¥Ìä∏"""
        if not self.data['times']:
            return
            
        times = self.data['times']
        
        # Îç∞Ïù¥ÌÑ∞ Í∏∏Ïù¥ Ï†úÌïú (ÏÑ±Îä•ÏùÑ ÏúÑÌï¥)
        max_points = 1000
        if len(times) > max_points:
            times = times[-max_points:]
            concentrations = self.data['concentrations'][-max_points:]
            s_pops = self.data['s_populations'][-max_points:]
            r_pops = self.data['r_populations'][-max_points:]
            resistance = self.data['resistance_fractions'][-max_points:]
        else:
            concentrations = self.data['concentrations']
            s_pops = self.data['s_populations']
            r_pops = self.data['r_populations']
            resistance = self.data['resistance_fractions']
        
        # 1. ÎÜçÎèÑ Í∑∏ÎûòÌîÑ ÏóÖÎç∞Ïù¥Ìä∏
        self.line_conc.set_data(times, concentrations)
        
        # 2. ÏÑ∏Í∑† Í∑∏ÎûòÌîÑ ÏóÖÎç∞Ïù¥Ìä∏
        self.line_s.set_data(times, s_pops)
        self.line_r.set_data(times, r_pops)
        total_pops = [s + r for s, r in zip(s_pops, r_pops)]
        self.line_total.set_data(times, total_pops)
        
        # 3. ÎÇ¥ÏÑ± Í∑∏ÎûòÌîÑ ÏóÖÎç∞Ïù¥Ìä∏
        self.line_resistance.set_data(times, resistance)
        
        # Ï∂ï Î≤îÏúÑ ÏûêÎèô Ï°∞Ï†ï
        current_time = times[-1] if times else 0
        time_window = 48  # 48ÏãúÍ∞Ñ ÏúàÎèÑÏö∞
        
        # ÎÜçÎèÑ Í∑∏ÎûòÌîÑ
        self.ax1.set_xlim(max(0, current_time - time_window), current_time + 12)
        if concentrations and any(c > 0 for c in concentrations):
            self.ax1.set_ylim(0.01, max(concentrations) * 2)
        
        # ÏÑ∏Í∑† Í∑∏ÎûòÌîÑ
        self.ax2.set_xlim(max(0, current_time - time_window), current_time + 12)
        if total_pops:
            min_pop = min([p for p in total_pops if p > 0]) if any(p > 0 for p in total_pops) else 1
            max_pop = max(total_pops)
            self.ax2.set_ylim(min_pop / 10, max_pop * 10)
        
        # ÎÇ¥ÏÑ± Í∑∏ÎûòÌîÑ
        self.ax3.set_xlim(max(0, current_time - time_window), current_time + 12)
        self.ax3.set_ylim(0, 100)
        
        # Ìà¨ÏïΩ ÏãúÏ†ê ÌëúÏãú
        for dose_time in self.data['dose_events']:
            if dose_time >= current_time - time_window:
                self.ax1.axvline(x=dose_time, color='yellow', alpha=0.5, linewidth=1)
                self.ax2.axvline(x=dose_time, color='yellow', alpha=0.5, linewidth=1)
                self.ax3.axvline(x=dose_time, color='yellow', alpha=0.5, linewidth=1)
        
        # 4. ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
        self.update_stats()
        
        # Í∑∏ÎûòÌîÑ Îã§Ïãú Í∑∏Î¶¨Í∏∞
        self.fig.canvas.draw()
        
    def update_stats(self):
        """Ïã§ÏãúÍ∞Ñ ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏"""
        self.ax4.clear()
        self.ax4.set_title('üìà Ïã§ÏãúÍ∞Ñ ÌÜµÍ≥Ñ', fontsize=14, fontweight='bold')
        self.ax4.axis('off')
        
        if self.data['times']:
            current_time = self.data['times'][-1]
            current_conc = self.data['concentrations'][-1]
            current_s = self.data['s_populations'][-1]
            current_r = self.data['r_populations'][-1]
            current_resistance = self.data['resistance_fractions'][-1]
            
            total_bacteria = current_s + current_r
            dose_count = len(self.data['dose_events'])
            
            # ÏπòÎ£å ÏÑ±Í≥µ ÌåêÏ†ï
            treatment_success = total_bacteria < 1e6 and current_resistance < 10
            
            stats_text = f"""
ÏãúÍ∞Ñ: {current_time:.1f} / {self.max_time} ÏãúÍ∞Ñ
ÎÜçÎèÑ: {current_conc:.3f} mg/L
Í∞êÏàòÏÑ±Í∑†: {current_s:.2e}
ÎÇ¥ÏÑ±Í∑†: {current_r:.2e}
ÎÇ¥ÏÑ± ÎπÑÏú®: {current_resistance:.1f}%
Ìà¨ÏïΩ ÌöüÏàò: {dose_count}Ìöå

ÏπòÎ£å ÏÑ±Í≥µ: {'‚úÖ' if treatment_success else '‚ùå'}
ÏßÑÌñâÎ•†: {current_time/self.max_time*100:.1f}%
            """
            
            self.ax4.text(0.05, 0.95, stats_text, transform=self.ax4.transAxes,
                         fontsize=10, verticalalignment='top', fontfamily='monospace',
                         bbox=dict(boxstyle="round,pad=0.3", facecolor="lightblue", alpha=0.8))
        
    def animate(self, frame):
        """Ïï†ÎãàÎ©îÏù¥ÏÖò ÌîÑÎ†àÏûÑ"""
        if self.running and self.current_time < self.max_time:
            self.update_simulation_step()
            self.update_plots()
            
        if self.current_time >= self.max_time:
            self.running = False
            self.btn_start.label.set_text('ÏôÑÎ£å')
            self.save_results()
            print("üéâ ÏãúÎÆ¨Î†àÏù¥ÏÖò ÏôÑÎ£å!")
            
        return []
    
    def save_results(self):
        """Í≤∞Í≥º Ï†ÄÏû•"""
        results = {
            'timestamp': datetime.now().isoformat(),
            'parameters': {
                'dose': self.dose,
                'interval': self.interval,
                'patient_weight': self.patient_weight
            },
            'final_results': {
                'final_time': self.current_time,
                'final_concentration': self.data['concentrations'][-1] if self.data['concentrations'] else 0,
                'final_total_bacteria': (self.data['s_populations'][-1] + self.data['r_populations'][-1]) if self.data['s_populations'] else 0,
                'final_resistance_fraction': self.data['resistance_fractions'][-1] if self.data['resistance_fractions'] else 0,
                'total_doses': len(self.data['dose_events'])
            },
            'time_series': self.data
        }
        
        # Í≤∞Í≥º ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
        os.makedirs('results', exist_ok=True)
        
        with open('results/fixed_simulation_results.json', 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        print("üìä Í≤∞Í≥º Ï†ÄÏû•: results/fixed_simulation_results.json")
        
    def run_simulation(self):
        """ÏãúÎÆ¨Î†àÏù¥ÏÖò Ïã§Ìñâ"""
        print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë           üß¨ ÏôÑÎ≤ΩÌïú Ìï≠ÏÉùÏ†ú ÎÇ¥ÏÑ± ÏßÑÌôî AI ÏãúÎÆ¨Î†àÏù¥ÌÑ∞            ‚ïë
‚ïë                Samsung Innovation Challenge 2025              ‚ïë
‚ïë                                                              ‚ïë
‚ïë  üéØ Ïã§ÏãúÍ∞Ñ ÏãúÍ∞ÅÌôî | ü§ñ AI ÏòàÏ∏° | üìä ÌïúÍ∏Ä ÏßÄÏõê               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üöÄ Ï£ºÏöî Í∏∞Îä•:
   ‚úÖ ÏôÑÎ≤ΩÌïú ÌïúÍ∏Ä ÏßÄÏõê
   ‚úÖ ÏïàÏ†ïÏ†ÅÏù∏ Í∑∏ÎûòÌîÑ ÌëúÏãú
   ‚úÖ Ïã§ÏãúÍ∞Ñ ÌååÎùºÎØ∏ÌÑ∞ Ï°∞Ï†ï
   ‚úÖ Îã§Ï∞®Ïõê ÏãúÍ∞ÅÌôî
   ‚úÖ ÏûêÎèô Í≤∞Í≥º Ï†ÄÏû•

üí° ÏÇ¨Ïö©Î≤ï:
   - Ïä¨ÎùºÏù¥Îçî: Ïö©ÎüâÍ≥º Í∞ÑÍ≤© Ïã§ÏãúÍ∞Ñ Ï°∞Ï†ï
   - 'ÏãúÏûë' Î≤ÑÌäº: ÏãúÎÆ¨Î†àÏù¥ÏÖò ÏãúÏûë/Ï†ïÏßÄ
   - 'Î¶¨ÏÖã' Î≤ÑÌäº: ÏôÑÏ†Ñ Ï¥àÍ∏∞Ìôî
   - Í∑∏ÎûòÌîÑ: Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ Î™®ÎãàÌÑ∞ÎßÅ

‚ö†Ô∏è Ï∞ΩÏùÑ Îã´ÏúºÎ©¥ ÏãúÎÆ¨Î†àÏù¥ÏÖòÏù¥ Ï¢ÖÎ£åÎê©ÎãàÎã§.
        """)
        
        # GUI ÏÑ§Ï†ï
        self.setup_gui()
        
        # Ïï†ÎãàÎ©îÏù¥ÏÖò ÏãúÏûë
        self.animation = animation.FuncAnimation(
            self.fig, self.animate, 
            interval=100, blit=False, 
            repeat=True, cache_frame_data=False
        )
        
        # Ï∞Ω ÌëúÏãú
        plt.tight_layout()
        plt.show(block=True)  # Î∏îÎ°úÌÇπ Î™®ÎìúÎ°ú Ïã§Ìñâ
        
        print("üëã ÏãúÎÆ¨Î†àÏù¥ÏÖò Ï¢ÖÎ£å")

def main():
    """Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò"""
    print("üß¨ ÏôÑÎ≤ΩÌïú Ìï≠ÏÉùÏ†ú ÎÇ¥ÏÑ± ÏßÑÌôî AI ÏãúÎÆ¨Î†àÏù¥ÌÑ∞ ÏãúÏûë...")
    
    try:
        # ÏãúÎÆ¨Î†àÏù¥ÌÑ∞ ÏÉùÏÑ± Î∞è Ïã§Ìñâ
        simulator = FixedAntibioticSimulator()
        simulator.run_simulation()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è ÏÇ¨Ïö©ÏûêÏóê ÏùòÌï¥ Ï§ëÎã®Îê®")
    except Exception as e:
        print(f"‚ùå Ïò§Î•ò Î∞úÏÉù: {e}")
        print("ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥:")
        print(f"   - Python Î≤ÑÏ†Ñ: {sys.version}")
        print(f"   - Matplotlib Î≤ÑÏ†Ñ: {matplotlib.__version__}")
        print(f"   - Î∞±ÏóîÎìú: {matplotlib.get_backend()}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
